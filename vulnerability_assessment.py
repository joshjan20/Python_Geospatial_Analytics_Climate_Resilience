import geopandas as gpd
import numpy as np
import pandas as pd

def assess_vulnerability(crop_data, processed_climate_data):
    print("Crop Data Columns:", crop_data.columns)
    print("Processed Climate Data Data Variables:", processed_climate_data.data_vars)

    # Initialize lists to store climate values for each crop
    mean_temperatures = []
    mean_precipitations = []

    # Iterate through each crop and extract climate data
    for index, row in crop_data.iterrows():
        lat, lon = row['geometry'].y, row['geometry'].x  # Extract latitude and longitude

        # Find nearest climate data grid point (simple approach)
        lat_idx = np.argmin(np.abs(processed_climate_data['lat'].values - lat))
        lon_idx = np.argmin(np.abs(processed_climate_data['lon'].values - lon))

        # Calculate mean temperature and precipitation over time for this location
        mean_temp = processed_climate_data['temperature'][:, lat_idx, lon_idx].mean().item()
        mean_prec = processed_climate_data['precipitation'][:, lat_idx, lon_idx].mean().item()

        mean_temperatures.append(mean_temp)
        mean_precipitations.append(mean_prec)

    # Add these mean values to the crop DataFrame
    crop_data['mean_temp'] = mean_temperatures
    crop_data['mean_prec'] = mean_precipitations

    # Calculate risk score (you can adjust the formula based on actual metrics)
    crop_data['risk_score'] = crop_data['mean_temp'] / crop_data['mean_prec']  # Replace with appropriate metrics

    # Filter vulnerable crops
    vulnerable_crops = crop_data[crop_data['risk_score'] > 0.5]  # Example condition
    return vulnerable_crops
